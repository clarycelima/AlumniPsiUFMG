{"version":3,"sources":["webpack:///./node_modules/svg-pan-zoom/src/shadow-viewport.js","webpack:///./node_modules/svg-pan-zoom/src/svg-utilities.js","webpack:///./node_modules/svg-pan-zoom/src/utilities.js","webpack:///./node_modules/svg-pan-zoom/src/svg-pan-zoom.js","webpack:///./node_modules/svg-pan-zoom/src/uniwheel.js","webpack:///./node_modules/svg-pan-zoom/src/control-icons.js","webpack:///./node_modules/svg-pan-zoom/src/browserify.js"],"names":["SvgUtils","__webpack_require__","Utils","ShadowViewport","viewport","options","this","init","prototype","originalState","zoom","x","y","activeState","updateCTMCached","proxy","updateCTM","requestAnimationFrame","createRequestAnimationFrame","refreshRate","viewBox","width","height","cacheViewBox","newCTM","processCTM","setCTM","svgViewBox","svg","getAttribute","viewBoxValues","split","filter","v","map","parseFloat","Math","min","updateCTMOnNextFrame","removeAttribute","simpleViewBoxCache","bBox","getBBox","getViewBox","extend","newScale","getCTM","fit","contain","max","a","d","e","f","center","offsetX","offsetY","getOriginalState","getState","getZoom","getRelativeZoom","computeRelativeZoom","scale","getPan","safeCTM","createSVGMatrix","b","c","willZoom","isZoomDifferent","willPan","isPanDifferent","beforeZoom","updateCache","onZoom","preventPan","beforePan","preventPanX","preventPanY","isObject","isNumber","onPan","pendingUpdate","call","window","ctm","defs","onUpdatedCTM","module","exports","_browser","document","documentMode","svgNS","xmlNS","xmlnsNS","xlinkNS","evNS","getBoundingClientRectNormalized","clientWidth","clientHeight","getBoundingClientRect","Error","getOrCreateViewport","selector","isElement","querySelector","childNodes","Array","slice","children","el","nodeName","length","viewportId","Date","toISOString","replace","createElementNS","setAttribute","svgChildren","i","appendChild","classNames","indexOf","push","join","setupSvgAttributes","setAttributeNS","parentNode","style","toLowerCase","internetExplorerRedisplayInterval","refreshDefsGlobal","throttle","allDefs","querySelectorAll","allDefsCount","thisDefs","insertBefore","element","matrix","that","s","transform","setTimeout","getEventPoint","evt","point","createSVGPoint","mouseAndTouchNormalize","clientX","clientY","getSvgCenterPoint","requestTimeout","timeout","callback","target","source","prop","o","HTMLElement","SVGElement","SVGSVGElement","nodeType","Object","toString","n","isNaN","isFinite","getSvg","elementOrSelector","String","tagName","contentDocument","documentElement","getSVGDocument","fn","context","apply","arguments","getType","touches","pageX","rect","left","pageY","top","originalEvent","isDblClick","prevEvt","detail","timeStampDiff","timeStamp","touchesDistance","sqrt","pow","now","getTime","func","wait","args","result","previous","later","leading","remaining","clearTimeout","trailing","floor","Wheel","ControlIcons","SvgPanZoom","optionsDefaults","viewportSelector","panEnabled","controlIconsEnabled","zoomEnabled","dblClickZoomEnabled","mouseWheelZoomEnabled","preventMouseEventsDefault","zoomScaleSensitivity","minZoom","maxZoom","customEventsHandler","eventsListenerElement","passiveListenerOption","passive","state","boundingClientRectNormalized","oldScale","oldPoint","newPoint","publicInstance","getPublicInstance","setBeforeZoom","setOnZoom","setBeforePan","setOnPan","setOnUpdatedCTM","enable","lastMouseWheelEventTime","setupHandlers","eventListeners","mousedown","handleMouseDown","touchstart","mouseup","handleMouseUp","touchend","mousemove","handleMouseMove","touchmove","mouseleave","touchleave","touchcancel","svgElement","instance","haltEventListeners","hasOwnProperty","event","addEventListener","enableMouseWheelZoom","wheelListener","handleMouseWheel","isPassiveListener","on","disableMouseWheelZoom","off","preventDefault","returnValue","delta","deltaY","timeDelta","divider","deltaMode","wheelDelta","abs","log","inversedScreenCTM","getScreenCTM","inverse","relativeMousePoint","matrixTransform","zoomAtPoint","zoomScale","zoomAbsolute","oldCTM","relativePoint","modifier","translate","multiply","absolute","publicZoom","computeFromRelativeZoom","publicZoomAtPoint","resetZoom","resetPan","pan","reset","handleDblClick","targetClass","zoomFactor","shiftKey","firstEventCTM","stateOrigin","viewportCTM","updateBBox","panBy","resize","disableControlIcons","enableControlIcons","destroy","removeEventListener","instancesStore","pi","enablePan","disablePan","isPanEnabled","enableZoom","disableZoom","isZoomEnabled","disable","isControlIconsEnabled","enableDblClickZoom","disableDblClickZoom","isDblClickZoomEnabled","isMouseWheelZoomEnabled","setZoomScaleSensitivity","setMinZoom","setMaxZoom","zoomBy","zoomAtPointBy","zoomIn","zoomOut","getSizes","realZoom","svgPanZoom","_addEventListener","_removeEventListener","support","prefix","fns","passiveOption","createCallback","srcElement","type","deltaX","delatZ","wheelDeltaX","getCallback","removeCallback","splice","_addWheelListener","elem","eventName","cb","_removeWheelListener","addWheelListener","removeWheelListener","createElement","undefined","onmousewheel","styleEl","textContent","zoomGroup","_createZoomIn","_createZoomReset","_createZoomOut","controlIcons","zoomInBackground","zoomInShape","resetPanZoomControl","resetPanZoomControlBackground","resetPanZoomControlShape1","resetPanZoomControlShape2","zoomOutBackground","zoomOutShape","removeChild"],"mappings":"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","file":"js/artigos-fruchtermans~completa~redes.ec8df90d.js","sourcesContent":["var SvgUtils = require(\"./svg-utilities\"),\r\n  Utils = require(\"./utilities\");\r\n\r\nvar ShadowViewport = function(viewport, options) {\r\n  this.init(viewport, options);\r\n};\r\n\r\n/**\r\n * Initialization\r\n *\r\n * @param  {SVGElement} viewport\r\n * @param  {Object} options\r\n */\r\nShadowViewport.prototype.init = function(viewport, options) {\r\n  // DOM Elements\r\n  this.viewport = viewport;\r\n  this.options = options;\r\n\r\n  // State cache\r\n  this.originalState = { zoom: 1, x: 0, y: 0 };\r\n  this.activeState = { zoom: 1, x: 0, y: 0 };\r\n\r\n  this.updateCTMCached = Utils.proxy(this.updateCTM, this);\r\n\r\n  // Create a custom requestAnimationFrame taking in account refreshRate\r\n  this.requestAnimationFrame = Utils.createRequestAnimationFrame(\r\n    this.options.refreshRate\r\n  );\r\n\r\n  // ViewBox\r\n  this.viewBox = { x: 0, y: 0, width: 0, height: 0 };\r\n  this.cacheViewBox();\r\n\r\n  // Process CTM\r\n  var newCTM = this.processCTM();\r\n\r\n  // Update viewport CTM and cache zoom and pan\r\n  this.setCTM(newCTM);\r\n\r\n  // Update CTM in this frame\r\n  this.updateCTM();\r\n};\r\n\r\n/**\r\n * Cache initial viewBox value\r\n * If no viewBox is defined, then use viewport size/position instead for viewBox values\r\n */\r\nShadowViewport.prototype.cacheViewBox = function() {\r\n  var svgViewBox = this.options.svg.getAttribute(\"viewBox\");\r\n\r\n  if (svgViewBox) {\r\n    var viewBoxValues = svgViewBox\r\n      .split(/[\\s\\,]/)\r\n      .filter(function(v) {\r\n        return v;\r\n      })\r\n      .map(parseFloat);\r\n\r\n    // Cache viewbox x and y offset\r\n    this.viewBox.x = viewBoxValues[0];\r\n    this.viewBox.y = viewBoxValues[1];\r\n    this.viewBox.width = viewBoxValues[2];\r\n    this.viewBox.height = viewBoxValues[3];\r\n\r\n    var zoom = Math.min(\r\n      this.options.width / this.viewBox.width,\r\n      this.options.height / this.viewBox.height\r\n    );\r\n\r\n    // Update active state\r\n    this.activeState.zoom = zoom;\r\n    this.activeState.x = (this.options.width - this.viewBox.width * zoom) / 2;\r\n    this.activeState.y = (this.options.height - this.viewBox.height * zoom) / 2;\r\n\r\n    // Force updating CTM\r\n    this.updateCTMOnNextFrame();\r\n\r\n    this.options.svg.removeAttribute(\"viewBox\");\r\n  } else {\r\n    this.simpleViewBoxCache();\r\n  }\r\n};\r\n\r\n/**\r\n * Recalculate viewport sizes and update viewBox cache\r\n */\r\nShadowViewport.prototype.simpleViewBoxCache = function() {\r\n  var bBox = this.viewport.getBBox();\r\n\r\n  this.viewBox.x = bBox.x;\r\n  this.viewBox.y = bBox.y;\r\n  this.viewBox.width = bBox.width;\r\n  this.viewBox.height = bBox.height;\r\n};\r\n\r\n/**\r\n * Returns a viewbox object. Safe to alter\r\n *\r\n * @return {Object} viewbox object\r\n */\r\nShadowViewport.prototype.getViewBox = function() {\r\n  return Utils.extend({}, this.viewBox);\r\n};\r\n\r\n/**\r\n * Get initial zoom and pan values. Save them into originalState\r\n * Parses viewBox attribute to alter initial sizes\r\n *\r\n * @return {CTM} CTM object based on options\r\n */\r\nShadowViewport.prototype.processCTM = function() {\r\n  var newCTM = this.getCTM();\r\n\r\n  if (this.options.fit || this.options.contain) {\r\n    var newScale;\r\n    if (this.options.fit) {\r\n      newScale = Math.min(\r\n        this.options.width / this.viewBox.width,\r\n        this.options.height / this.viewBox.height\r\n      );\r\n    } else {\r\n      newScale = Math.max(\r\n        this.options.width / this.viewBox.width,\r\n        this.options.height / this.viewBox.height\r\n      );\r\n    }\r\n\r\n    newCTM.a = newScale; //x-scale\r\n    newCTM.d = newScale; //y-scale\r\n    newCTM.e = -this.viewBox.x * newScale; //x-transform\r\n    newCTM.f = -this.viewBox.y * newScale; //y-transform\r\n  }\r\n\r\n  if (this.options.center) {\r\n    var offsetX =\r\n        (this.options.width -\r\n          (this.viewBox.width + this.viewBox.x * 2) * newCTM.a) *\r\n        0.5,\r\n      offsetY =\r\n        (this.options.height -\r\n          (this.viewBox.height + this.viewBox.y * 2) * newCTM.a) *\r\n        0.5;\r\n\r\n    newCTM.e = offsetX;\r\n    newCTM.f = offsetY;\r\n  }\r\n\r\n  // Cache initial values. Based on activeState and fix+center opitons\r\n  this.originalState.zoom = newCTM.a;\r\n  this.originalState.x = newCTM.e;\r\n  this.originalState.y = newCTM.f;\r\n\r\n  return newCTM;\r\n};\r\n\r\n/**\r\n * Return originalState object. Safe to alter\r\n *\r\n * @return {Object}\r\n */\r\nShadowViewport.prototype.getOriginalState = function() {\r\n  return Utils.extend({}, this.originalState);\r\n};\r\n\r\n/**\r\n * Return actualState object. Safe to alter\r\n *\r\n * @return {Object}\r\n */\r\nShadowViewport.prototype.getState = function() {\r\n  return Utils.extend({}, this.activeState);\r\n};\r\n\r\n/**\r\n * Get zoom scale\r\n *\r\n * @return {Float} zoom scale\r\n */\r\nShadowViewport.prototype.getZoom = function() {\r\n  return this.activeState.zoom;\r\n};\r\n\r\n/**\r\n * Get zoom scale for pubilc usage\r\n *\r\n * @return {Float} zoom scale\r\n */\r\nShadowViewport.prototype.getRelativeZoom = function() {\r\n  return this.activeState.zoom / this.originalState.zoom;\r\n};\r\n\r\n/**\r\n * Compute zoom scale for pubilc usage\r\n *\r\n * @return {Float} zoom scale\r\n */\r\nShadowViewport.prototype.computeRelativeZoom = function(scale) {\r\n  return scale / this.originalState.zoom;\r\n};\r\n\r\n/**\r\n * Get pan\r\n *\r\n * @return {Object}\r\n */\r\nShadowViewport.prototype.getPan = function() {\r\n  return { x: this.activeState.x, y: this.activeState.y };\r\n};\r\n\r\n/**\r\n * Return cached viewport CTM value that can be safely modified\r\n *\r\n * @return {SVGMatrix}\r\n */\r\nShadowViewport.prototype.getCTM = function() {\r\n  var safeCTM = this.options.svg.createSVGMatrix();\r\n\r\n  // Copy values manually as in FF they are not itterable\r\n  safeCTM.a = this.activeState.zoom;\r\n  safeCTM.b = 0;\r\n  safeCTM.c = 0;\r\n  safeCTM.d = this.activeState.zoom;\r\n  safeCTM.e = this.activeState.x;\r\n  safeCTM.f = this.activeState.y;\r\n\r\n  return safeCTM;\r\n};\r\n\r\n/**\r\n * Set a new CTM\r\n *\r\n * @param {SVGMatrix} newCTM\r\n */\r\nShadowViewport.prototype.setCTM = function(newCTM) {\r\n  var willZoom = this.isZoomDifferent(newCTM),\r\n    willPan = this.isPanDifferent(newCTM);\r\n\r\n  if (willZoom || willPan) {\r\n    // Before zoom\r\n    if (willZoom) {\r\n      // If returns false then cancel zooming\r\n      if (\r\n        this.options.beforeZoom(\r\n          this.getRelativeZoom(),\r\n          this.computeRelativeZoom(newCTM.a)\r\n        ) === false\r\n      ) {\r\n        newCTM.a = newCTM.d = this.activeState.zoom;\r\n        willZoom = false;\r\n      } else {\r\n        this.updateCache(newCTM);\r\n        this.options.onZoom(this.getRelativeZoom());\r\n      }\r\n    }\r\n\r\n    // Before pan\r\n    if (willPan) {\r\n      var preventPan = this.options.beforePan(this.getPan(), {\r\n          x: newCTM.e,\r\n          y: newCTM.f\r\n        }),\r\n        // If prevent pan is an object\r\n        preventPanX = false,\r\n        preventPanY = false;\r\n\r\n      // If prevent pan is Boolean false\r\n      if (preventPan === false) {\r\n        // Set x and y same as before\r\n        newCTM.e = this.getPan().x;\r\n        newCTM.f = this.getPan().y;\r\n\r\n        preventPanX = preventPanY = true;\r\n      } else if (Utils.isObject(preventPan)) {\r\n        // Check for X axes attribute\r\n        if (preventPan.x === false) {\r\n          // Prevent panning on x axes\r\n          newCTM.e = this.getPan().x;\r\n          preventPanX = true;\r\n        } else if (Utils.isNumber(preventPan.x)) {\r\n          // Set a custom pan value\r\n          newCTM.e = preventPan.x;\r\n        }\r\n\r\n        // Check for Y axes attribute\r\n        if (preventPan.y === false) {\r\n          // Prevent panning on x axes\r\n          newCTM.f = this.getPan().y;\r\n          preventPanY = true;\r\n        } else if (Utils.isNumber(preventPan.y)) {\r\n          // Set a custom pan value\r\n          newCTM.f = preventPan.y;\r\n        }\r\n      }\r\n\r\n      // Update willPan flag\r\n      // Check if newCTM is still different\r\n      if ((preventPanX && preventPanY) || !this.isPanDifferent(newCTM)) {\r\n        willPan = false;\r\n      } else {\r\n        this.updateCache(newCTM);\r\n        this.options.onPan(this.getPan());\r\n      }\r\n    }\r\n\r\n    // Check again if should zoom or pan\r\n    if (willZoom || willPan) {\r\n      this.updateCTMOnNextFrame();\r\n    }\r\n  }\r\n};\r\n\r\nShadowViewport.prototype.isZoomDifferent = function(newCTM) {\r\n  return this.activeState.zoom !== newCTM.a;\r\n};\r\n\r\nShadowViewport.prototype.isPanDifferent = function(newCTM) {\r\n  return this.activeState.x !== newCTM.e || this.activeState.y !== newCTM.f;\r\n};\r\n\r\n/**\r\n * Update cached CTM and active state\r\n *\r\n * @param {SVGMatrix} newCTM\r\n */\r\nShadowViewport.prototype.updateCache = function(newCTM) {\r\n  this.activeState.zoom = newCTM.a;\r\n  this.activeState.x = newCTM.e;\r\n  this.activeState.y = newCTM.f;\r\n};\r\n\r\nShadowViewport.prototype.pendingUpdate = false;\r\n\r\n/**\r\n * Place a request to update CTM on next Frame\r\n */\r\nShadowViewport.prototype.updateCTMOnNextFrame = function() {\r\n  if (!this.pendingUpdate) {\r\n    // Lock\r\n    this.pendingUpdate = true;\r\n\r\n    // Throttle next update\r\n    this.requestAnimationFrame.call(window, this.updateCTMCached);\r\n  }\r\n};\r\n\r\n/**\r\n * Update viewport CTM with cached CTM\r\n */\r\nShadowViewport.prototype.updateCTM = function() {\r\n  var ctm = this.getCTM();\r\n\r\n  // Updates SVG element\r\n  SvgUtils.setCTM(this.viewport, ctm, this.defs);\r\n\r\n  // Free the lock\r\n  this.pendingUpdate = false;\r\n\r\n  // Notify about the update\r\n  if (this.options.onUpdatedCTM) {\r\n    this.options.onUpdatedCTM(ctm);\r\n  }\r\n};\r\n\r\nmodule.exports = function(viewport, options) {\r\n  return new ShadowViewport(viewport, options);\r\n};\r\n","var Utils = require(\"./utilities\"),\r\n  _browser = \"unknown\";\r\n\r\n// http://stackoverflow.com/questions/9847580/how-to-detect-safari-chrome-ie-firefox-and-opera-browser\r\nif (/*@cc_on!@*/ false || !!document.documentMode) {\r\n  // internet explorer\r\n  _browser = \"ie\";\r\n}\r\n\r\nmodule.exports = {\r\n  svgNS: \"http://www.w3.org/2000/svg\",\r\n  xmlNS: \"http://www.w3.org/XML/1998/namespace\",\r\n  xmlnsNS: \"http://www.w3.org/2000/xmlns/\",\r\n  xlinkNS: \"http://www.w3.org/1999/xlink\",\r\n  evNS: \"http://www.w3.org/2001/xml-events\",\r\n\r\n  /**\r\n   * Get svg dimensions: width and height\r\n   *\r\n   * @param  {SVGSVGElement} svg\r\n   * @return {Object}     {width: 0, height: 0}\r\n   */\r\n  getBoundingClientRectNormalized: function(svg) {\r\n    if (svg.clientWidth && svg.clientHeight) {\r\n      return { width: svg.clientWidth, height: svg.clientHeight };\r\n    } else if (!!svg.getBoundingClientRect()) {\r\n      return svg.getBoundingClientRect();\r\n    } else {\r\n      throw new Error(\"Cannot get BoundingClientRect for SVG.\");\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Gets g element with class of \"viewport\" or creates it if it doesn't exist\r\n   *\r\n   * @param  {SVGSVGElement} svg\r\n   * @return {SVGElement}     g (group) element\r\n   */\r\n  getOrCreateViewport: function(svg, selector) {\r\n    var viewport = null;\r\n\r\n    if (Utils.isElement(selector)) {\r\n      viewport = selector;\r\n    } else {\r\n      viewport = svg.querySelector(selector);\r\n    }\r\n\r\n    // Check if there is just one main group in SVG\r\n    if (!viewport) {\r\n      var childNodes = Array.prototype.slice\r\n        .call(svg.childNodes || svg.children)\r\n        .filter(function(el) {\r\n          return el.nodeName !== \"defs\" && el.nodeName !== \"#text\";\r\n        });\r\n\r\n      // Node name should be SVGGElement and should have no transform attribute\r\n      // Groups with transform are not used as viewport because it involves parsing of all transform possibilities\r\n      if (\r\n        childNodes.length === 1 &&\r\n        childNodes[0].nodeName === \"g\" &&\r\n        childNodes[0].getAttribute(\"transform\") === null\r\n      ) {\r\n        viewport = childNodes[0];\r\n      }\r\n    }\r\n\r\n    // If no favorable group element exists then create one\r\n    if (!viewport) {\r\n      var viewportId =\r\n        \"viewport-\" + new Date().toISOString().replace(/\\D/g, \"\");\r\n      viewport = document.createElementNS(this.svgNS, \"g\");\r\n      viewport.setAttribute(\"id\", viewportId);\r\n\r\n      // Internet Explorer (all versions?) can't use childNodes, but other browsers prefer (require?) using childNodes\r\n      var svgChildren = svg.childNodes || svg.children;\r\n      if (!!svgChildren && svgChildren.length > 0) {\r\n        for (var i = svgChildren.length; i > 0; i--) {\r\n          // Move everything into viewport except defs\r\n          if (svgChildren[svgChildren.length - i].nodeName !== \"defs\") {\r\n            viewport.appendChild(svgChildren[svgChildren.length - i]);\r\n          }\r\n        }\r\n      }\r\n      svg.appendChild(viewport);\r\n    }\r\n\r\n    // Parse class names\r\n    var classNames = [];\r\n    if (viewport.getAttribute(\"class\")) {\r\n      classNames = viewport.getAttribute(\"class\").split(\" \");\r\n    }\r\n\r\n    // Set class (if not set already)\r\n    if (!~classNames.indexOf(\"svg-pan-zoom_viewport\")) {\r\n      classNames.push(\"svg-pan-zoom_viewport\");\r\n      viewport.setAttribute(\"class\", classNames.join(\" \"));\r\n    }\r\n\r\n    return viewport;\r\n  },\r\n\r\n  /**\r\n   * Set SVG attributes\r\n   *\r\n   * @param  {SVGSVGElement} svg\r\n   */\r\n  setupSvgAttributes: function(svg) {\r\n    // Setting default attributes\r\n    svg.setAttribute(\"xmlns\", this.svgNS);\r\n    svg.setAttributeNS(this.xmlnsNS, \"xmlns:xlink\", this.xlinkNS);\r\n    svg.setAttributeNS(this.xmlnsNS, \"xmlns:ev\", this.evNS);\r\n\r\n    // Needed for Internet Explorer, otherwise the viewport overflows\r\n    if (svg.parentNode !== null) {\r\n      var style = svg.getAttribute(\"style\") || \"\";\r\n      if (style.toLowerCase().indexOf(\"overflow\") === -1) {\r\n        svg.setAttribute(\"style\", \"overflow: hidden; \" + style);\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * How long Internet Explorer takes to finish updating its display (ms).\r\n   */\r\n  internetExplorerRedisplayInterval: 300,\r\n\r\n  /**\r\n   * Forces the browser to redisplay all SVG elements that rely on an\r\n   * element defined in a 'defs' section. It works globally, for every\r\n   * available defs element on the page.\r\n   * The throttling is intentionally global.\r\n   *\r\n   * This is only needed for IE. It is as a hack to make markers (and 'use' elements?)\r\n   * visible after pan/zoom when there are multiple SVGs on the page.\r\n   * See bug report: https://connect.microsoft.com/IE/feedback/details/781964/\r\n   * also see svg-pan-zoom issue: https://github.com/ariutta/svg-pan-zoom/issues/62\r\n   */\r\n  refreshDefsGlobal: Utils.throttle(\r\n    function() {\r\n      var allDefs = document.querySelectorAll(\"defs\");\r\n      var allDefsCount = allDefs.length;\r\n      for (var i = 0; i < allDefsCount; i++) {\r\n        var thisDefs = allDefs[i];\r\n        thisDefs.parentNode.insertBefore(thisDefs, thisDefs);\r\n      }\r\n    },\r\n    this ? this.internetExplorerRedisplayInterval : null\r\n  ),\r\n\r\n  /**\r\n   * Sets the current transform matrix of an element\r\n   *\r\n   * @param {SVGElement} element\r\n   * @param {SVGMatrix} matrix  CTM\r\n   * @param {SVGElement} defs\r\n   */\r\n  setCTM: function(element, matrix, defs) {\r\n    var that = this,\r\n      s =\r\n        \"matrix(\" +\r\n        matrix.a +\r\n        \",\" +\r\n        matrix.b +\r\n        \",\" +\r\n        matrix.c +\r\n        \",\" +\r\n        matrix.d +\r\n        \",\" +\r\n        matrix.e +\r\n        \",\" +\r\n        matrix.f +\r\n        \")\";\r\n\r\n    element.setAttributeNS(null, \"transform\", s);\r\n    if (\"transform\" in element.style) {\r\n      element.style.transform = s;\r\n    } else if (\"-ms-transform\" in element.style) {\r\n      element.style[\"-ms-transform\"] = s;\r\n    } else if (\"-webkit-transform\" in element.style) {\r\n      element.style[\"-webkit-transform\"] = s;\r\n    }\r\n\r\n    // IE has a bug that makes markers disappear on zoom (when the matrix \"a\" and/or \"d\" elements change)\r\n    // see http://stackoverflow.com/questions/17654578/svg-marker-does-not-work-in-ie9-10\r\n    // and http://srndolha.wordpress.com/2013/11/25/svg-line-markers-may-disappear-in-internet-explorer-11/\r\n    if (_browser === \"ie\" && !!defs) {\r\n      // this refresh is intended for redisplaying the SVG during zooming\r\n      defs.parentNode.insertBefore(defs, defs);\r\n      // this refresh is intended for redisplaying the other SVGs on a page when panning a given SVG\r\n      // it is also needed for the given SVG itself, on zoomEnd, if the SVG contains any markers that\r\n      // are located under any other element(s).\r\n      window.setTimeout(function() {\r\n        that.refreshDefsGlobal();\r\n      }, that.internetExplorerRedisplayInterval);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Instantiate an SVGPoint object with given event coordinates\r\n   *\r\n   * @param {Event} evt\r\n   * @param  {SVGSVGElement} svg\r\n   * @return {SVGPoint}     point\r\n   */\r\n  getEventPoint: function(evt, svg) {\r\n    var point = svg.createSVGPoint();\r\n\r\n    Utils.mouseAndTouchNormalize(evt, svg);\r\n\r\n    point.x = evt.clientX;\r\n    point.y = evt.clientY;\r\n\r\n    return point;\r\n  },\r\n\r\n  /**\r\n   * Get SVG center point\r\n   *\r\n   * @param  {SVGSVGElement} svg\r\n   * @return {SVGPoint}\r\n   */\r\n  getSvgCenterPoint: function(svg, width, height) {\r\n    return this.createSVGPoint(svg, width / 2, height / 2);\r\n  },\r\n\r\n  /**\r\n   * Create a SVGPoint with given x and y\r\n   *\r\n   * @param  {SVGSVGElement} svg\r\n   * @param  {Number} x\r\n   * @param  {Number} y\r\n   * @return {SVGPoint}\r\n   */\r\n  createSVGPoint: function(svg, x, y) {\r\n    var point = svg.createSVGPoint();\r\n    point.x = x;\r\n    point.y = y;\r\n\r\n    return point;\r\n  }\r\n};\r\n","module.exports = {\r\n  /**\r\n   * Extends an object\r\n   *\r\n   * @param  {Object} target object to extend\r\n   * @param  {Object} source object to take properties from\r\n   * @return {Object}        extended object\r\n   */\r\n  extend: function(target, source) {\r\n    target = target || {};\r\n    for (var prop in source) {\r\n      // Go recursively\r\n      if (this.isObject(source[prop])) {\r\n        target[prop] = this.extend(target[prop], source[prop]);\r\n      } else {\r\n        target[prop] = source[prop];\r\n      }\r\n    }\r\n    return target;\r\n  },\r\n\r\n  /**\r\n   * Checks if an object is a DOM element\r\n   *\r\n   * @param  {Object}  o HTML element or String\r\n   * @return {Boolean}   returns true if object is a DOM element\r\n   */\r\n  isElement: function(o) {\r\n    return (\r\n      o instanceof HTMLElement ||\r\n      o instanceof SVGElement ||\r\n      o instanceof SVGSVGElement || //DOM2\r\n      (o &&\r\n        typeof o === \"object\" &&\r\n        o !== null &&\r\n        o.nodeType === 1 &&\r\n        typeof o.nodeName === \"string\")\r\n    );\r\n  },\r\n\r\n  /**\r\n   * Checks if an object is an Object\r\n   *\r\n   * @param  {Object}  o Object\r\n   * @return {Boolean}   returns true if object is an Object\r\n   */\r\n  isObject: function(o) {\r\n    return Object.prototype.toString.call(o) === \"[object Object]\";\r\n  },\r\n\r\n  /**\r\n   * Checks if variable is Number\r\n   *\r\n   * @param  {Integer|Float}  n\r\n   * @return {Boolean}   returns true if variable is Number\r\n   */\r\n  isNumber: function(n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  },\r\n\r\n  /**\r\n   * Search for an SVG element\r\n   *\r\n   * @param  {Object|String} elementOrSelector DOM Element or selector String\r\n   * @return {Object|Null}                   SVG or null\r\n   */\r\n  getSvg: function(elementOrSelector) {\r\n    var element, svg;\r\n\r\n    if (!this.isElement(elementOrSelector)) {\r\n      // If selector provided\r\n      if (\r\n        typeof elementOrSelector === \"string\" ||\r\n        elementOrSelector instanceof String\r\n      ) {\r\n        // Try to find the element\r\n        element = document.querySelector(elementOrSelector);\r\n\r\n        if (!element) {\r\n          throw new Error(\r\n            \"Provided selector did not find any elements. Selector: \" +\r\n              elementOrSelector\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        throw new Error(\"Provided selector is not an HTML object nor String\");\r\n        return null;\r\n      }\r\n    } else {\r\n      element = elementOrSelector;\r\n    }\r\n\r\n    if (element.tagName.toLowerCase() === \"svg\") {\r\n      svg = element;\r\n    } else {\r\n      if (element.tagName.toLowerCase() === \"object\") {\r\n        svg = element.contentDocument.documentElement;\r\n      } else {\r\n        if (element.tagName.toLowerCase() === \"embed\") {\r\n          svg = element.getSVGDocument().documentElement;\r\n        } else {\r\n          if (element.tagName.toLowerCase() === \"img\") {\r\n            throw new Error(\r\n              'Cannot script an SVG in an \"img\" element. Please use an \"object\" element or an in-line SVG.'\r\n            );\r\n          } else {\r\n            throw new Error(\"Cannot get SVG.\");\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    return svg;\r\n  },\r\n\r\n  /**\r\n   * Attach a given context to a function\r\n   * @param  {Function} fn      Function\r\n   * @param  {Object}   context Context\r\n   * @return {Function}           Function with certain context\r\n   */\r\n  proxy: function(fn, context) {\r\n    return function() {\r\n      return fn.apply(context, arguments);\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Returns object type\r\n   * Uses toString that returns [object SVGPoint]\r\n   * And than parses object type from string\r\n   *\r\n   * @param  {Object} o Any object\r\n   * @return {String}   Object type\r\n   */\r\n  getType: function(o) {\r\n    return Object.prototype.toString\r\n      .apply(o)\r\n      .replace(/^\\[object\\s/, \"\")\r\n      .replace(/\\]$/, \"\");\r\n  },\r\n\r\n  /**\r\n   * If it is a touch event than add clientX and clientY to event object\r\n   *\r\n   * @param  {Event} evt\r\n   * @param  {SVGSVGElement} svg\r\n   */\r\n  mouseAndTouchNormalize: function(evt, svg) {\r\n    // If no clientX then fallback\r\n    if (evt.clientX === void 0 || evt.clientX === null) {\r\n      // Fallback\r\n      evt.clientX = 0;\r\n      evt.clientY = 0;\r\n\r\n      // If it is a touch event\r\n      if (evt.touches !== void 0 && evt.touches.length) {\r\n        if (evt.touches[0].clientX !== void 0) {\r\n          evt.clientX = evt.touches[0].clientX;\r\n          evt.clientY = evt.touches[0].clientY;\r\n        } else if (evt.touches[0].pageX !== void 0) {\r\n          var rect = svg.getBoundingClientRect();\r\n\r\n          evt.clientX = evt.touches[0].pageX - rect.left;\r\n          evt.clientY = evt.touches[0].pageY - rect.top;\r\n        }\r\n        // If it is a custom event\r\n      } else if (evt.originalEvent !== void 0) {\r\n        if (evt.originalEvent.clientX !== void 0) {\r\n          evt.clientX = evt.originalEvent.clientX;\r\n          evt.clientY = evt.originalEvent.clientY;\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Check if an event is a double click/tap\r\n   * TODO: For touch gestures use a library (hammer.js) that takes in account other events\r\n   * (touchmove and touchend). It should take in account tap duration and traveled distance\r\n   *\r\n   * @param  {Event}  evt\r\n   * @param  {Event}  prevEvt Previous Event\r\n   * @return {Boolean}\r\n   */\r\n  isDblClick: function(evt, prevEvt) {\r\n    // Double click detected by browser\r\n    if (evt.detail === 2) {\r\n      return true;\r\n    }\r\n    // Try to compare events\r\n    else if (prevEvt !== void 0 && prevEvt !== null) {\r\n      var timeStampDiff = evt.timeStamp - prevEvt.timeStamp, // should be lower than 250 ms\r\n        touchesDistance = Math.sqrt(\r\n          Math.pow(evt.clientX - prevEvt.clientX, 2) +\r\n            Math.pow(evt.clientY - prevEvt.clientY, 2)\r\n        );\r\n\r\n      return timeStampDiff < 250 && touchesDistance < 10;\r\n    }\r\n\r\n    // Nothing found\r\n    return false;\r\n  },\r\n\r\n  /**\r\n   * Returns current timestamp as an integer\r\n   *\r\n   * @return {Number}\r\n   */\r\n  now:\r\n    Date.now ||\r\n    function() {\r\n      return new Date().getTime();\r\n    },\r\n\r\n  // From underscore.\r\n  // Returns a function, that, when invoked, will only be triggered at most once\r\n  // during a given window of time. Normally, the throttled function will run\r\n  // as much as it can, without ever going more than once per `wait` duration;\r\n  // but if you'd like to disable the execution on the leading edge, pass\r\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\r\n  throttle: function(func, wait, options) {\r\n    var that = this;\r\n    var context, args, result;\r\n    var timeout = null;\r\n    var previous = 0;\r\n    if (!options) {\r\n      options = {};\r\n    }\r\n    var later = function() {\r\n      previous = options.leading === false ? 0 : that.now();\r\n      timeout = null;\r\n      result = func.apply(context, args);\r\n      if (!timeout) {\r\n        context = args = null;\r\n      }\r\n    };\r\n    return function() {\r\n      var now = that.now();\r\n      if (!previous && options.leading === false) {\r\n        previous = now;\r\n      }\r\n      var remaining = wait - (now - previous);\r\n      context = this; // eslint-disable-line consistent-this\r\n      args = arguments;\r\n      if (remaining <= 0 || remaining > wait) {\r\n        clearTimeout(timeout);\r\n        timeout = null;\r\n        previous = now;\r\n        result = func.apply(context, args);\r\n        if (!timeout) {\r\n          context = args = null;\r\n        }\r\n      } else if (!timeout && options.trailing !== false) {\r\n        timeout = setTimeout(later, remaining);\r\n      }\r\n      return result;\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Create a requestAnimationFrame simulation\r\n   *\r\n   * @param  {Number|String} refreshRate\r\n   * @return {Function}\r\n   */\r\n  createRequestAnimationFrame: function(refreshRate) {\r\n    var timeout = null;\r\n\r\n    // Convert refreshRate to timeout\r\n    if (refreshRate !== \"auto\" && refreshRate < 60 && refreshRate > 1) {\r\n      timeout = Math.floor(1000 / refreshRate);\r\n    }\r\n\r\n    if (timeout === null) {\r\n      return window.requestAnimationFrame || requestTimeout(33);\r\n    } else {\r\n      return requestTimeout(timeout);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Create a callback that will execute after a given timeout\r\n *\r\n * @param  {Function} timeout\r\n * @return {Function}\r\n */\r\nfunction requestTimeout(timeout) {\r\n  return function(callback) {\r\n    window.setTimeout(callback, timeout);\r\n  };\r\n}\r\n","var Wheel = require(\"./uniwheel\"),\r\n  ControlIcons = require(\"./control-icons\"),\r\n  Utils = require(\"./utilities\"),\r\n  SvgUtils = require(\"./svg-utilities\"),\r\n  ShadowViewport = require(\"./shadow-viewport\");\r\n\r\nvar SvgPanZoom = function(svg, options) {\r\n  this.init(svg, options);\r\n};\r\n\r\nvar optionsDefaults = {\r\n  viewportSelector: \".svg-pan-zoom_viewport\", // Viewport selector. Can be querySelector string or SVGElement\r\n  panEnabled: true, // enable or disable panning (default enabled)\r\n  controlIconsEnabled: false, // insert icons to give user an option in addition to mouse events to control pan/zoom (default disabled)\r\n  zoomEnabled: true, // enable or disable zooming (default enabled)\r\n  dblClickZoomEnabled: true, // enable or disable zooming by double clicking (default enabled)\r\n  mouseWheelZoomEnabled: true, // enable or disable zooming by mouse wheel (default enabled)\r\n  preventMouseEventsDefault: true, // enable or disable preventDefault for mouse events\r\n  zoomScaleSensitivity: 0.1, // Zoom sensitivity\r\n  minZoom: 0.5, // Minimum Zoom level\r\n  maxZoom: 10, // Maximum Zoom level\r\n  fit: true, // enable or disable viewport fit in SVG (default true)\r\n  contain: false, // enable or disable viewport contain the svg (default false)\r\n  center: true, // enable or disable viewport centering in SVG (default true)\r\n  refreshRate: \"auto\", // Maximum number of frames per second (altering SVG's viewport)\r\n  beforeZoom: null,\r\n  onZoom: null,\r\n  beforePan: null,\r\n  onPan: null,\r\n  customEventsHandler: null,\r\n  eventsListenerElement: null,\r\n  onUpdatedCTM: null\r\n};\r\n\r\nvar passiveListenerOption = { passive: true };\r\n\r\nSvgPanZoom.prototype.init = function(svg, options) {\r\n  var that = this;\r\n\r\n  this.svg = svg;\r\n  this.defs = svg.querySelector(\"defs\");\r\n\r\n  // Add default attributes to SVG\r\n  SvgUtils.setupSvgAttributes(this.svg);\r\n\r\n  // Set options\r\n  this.options = Utils.extend(Utils.extend({}, optionsDefaults), options);\r\n\r\n  // Set default state\r\n  this.state = \"none\";\r\n\r\n  // Get dimensions\r\n  var boundingClientRectNormalized = SvgUtils.getBoundingClientRectNormalized(\r\n    svg\r\n  );\r\n  this.width = boundingClientRectNormalized.width;\r\n  this.height = boundingClientRectNormalized.height;\r\n\r\n  // Init shadow viewport\r\n  this.viewport = ShadowViewport(\r\n    SvgUtils.getOrCreateViewport(this.svg, this.options.viewportSelector),\r\n    {\r\n      svg: this.svg,\r\n      width: this.width,\r\n      height: this.height,\r\n      fit: this.options.fit,\r\n      contain: this.options.contain,\r\n      center: this.options.center,\r\n      refreshRate: this.options.refreshRate,\r\n      // Put callbacks into functions as they can change through time\r\n      beforeZoom: function(oldScale, newScale) {\r\n        if (that.viewport && that.options.beforeZoom) {\r\n          return that.options.beforeZoom(oldScale, newScale);\r\n        }\r\n      },\r\n      onZoom: function(scale) {\r\n        if (that.viewport && that.options.onZoom) {\r\n          return that.options.onZoom(scale);\r\n        }\r\n      },\r\n      beforePan: function(oldPoint, newPoint) {\r\n        if (that.viewport && that.options.beforePan) {\r\n          return that.options.beforePan(oldPoint, newPoint);\r\n        }\r\n      },\r\n      onPan: function(point) {\r\n        if (that.viewport && that.options.onPan) {\r\n          return that.options.onPan(point);\r\n        }\r\n      },\r\n      onUpdatedCTM: function(ctm) {\r\n        if (that.viewport && that.options.onUpdatedCTM) {\r\n          return that.options.onUpdatedCTM(ctm);\r\n        }\r\n      }\r\n    }\r\n  );\r\n\r\n  // Wrap callbacks into public API context\r\n  var publicInstance = this.getPublicInstance();\r\n  publicInstance.setBeforeZoom(this.options.beforeZoom);\r\n  publicInstance.setOnZoom(this.options.onZoom);\r\n  publicInstance.setBeforePan(this.options.beforePan);\r\n  publicInstance.setOnPan(this.options.onPan);\r\n  publicInstance.setOnUpdatedCTM(this.options.onUpdatedCTM);\r\n\r\n  if (this.options.controlIconsEnabled) {\r\n    ControlIcons.enable(this);\r\n  }\r\n\r\n  // Init events handlers\r\n  this.lastMouseWheelEventTime = Date.now();\r\n  this.setupHandlers();\r\n};\r\n\r\n/**\r\n * Register event handlers\r\n */\r\nSvgPanZoom.prototype.setupHandlers = function() {\r\n  var that = this,\r\n    prevEvt = null; // use for touchstart event to detect double tap\r\n\r\n  this.eventListeners = {\r\n    // Mouse down group\r\n    mousedown: function(evt) {\r\n      var result = that.handleMouseDown(evt, prevEvt);\r\n      prevEvt = evt;\r\n      return result;\r\n    },\r\n    touchstart: function(evt) {\r\n      var result = that.handleMouseDown(evt, prevEvt);\r\n      prevEvt = evt;\r\n      return result;\r\n    },\r\n\r\n    // Mouse up group\r\n    mouseup: function(evt) {\r\n      return that.handleMouseUp(evt);\r\n    },\r\n    touchend: function(evt) {\r\n      return that.handleMouseUp(evt);\r\n    },\r\n\r\n    // Mouse move group\r\n    mousemove: function(evt) {\r\n      return that.handleMouseMove(evt);\r\n    },\r\n    touchmove: function(evt) {\r\n      return that.handleMouseMove(evt);\r\n    },\r\n\r\n    // Mouse leave group\r\n    mouseleave: function(evt) {\r\n      return that.handleMouseUp(evt);\r\n    },\r\n    touchleave: function(evt) {\r\n      return that.handleMouseUp(evt);\r\n    },\r\n    touchcancel: function(evt) {\r\n      return that.handleMouseUp(evt);\r\n    }\r\n  };\r\n\r\n  // Init custom events handler if available\r\n  // eslint-disable-next-line eqeqeq\r\n  if (this.options.customEventsHandler != null) {\r\n    this.options.customEventsHandler.init({\r\n      svgElement: this.svg,\r\n      eventsListenerElement: this.options.eventsListenerElement,\r\n      instance: this.getPublicInstance()\r\n    });\r\n\r\n    // Custom event handler may halt builtin listeners\r\n    var haltEventListeners = this.options.customEventsHandler\r\n      .haltEventListeners;\r\n    if (haltEventListeners && haltEventListeners.length) {\r\n      for (var i = haltEventListeners.length - 1; i >= 0; i--) {\r\n        if (this.eventListeners.hasOwnProperty(haltEventListeners[i])) {\r\n          delete this.eventListeners[haltEventListeners[i]];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Bind eventListeners\r\n  for (var event in this.eventListeners) {\r\n    // Attach event to eventsListenerElement or SVG if not available\r\n    (this.options.eventsListenerElement || this.svg).addEventListener(\r\n      event,\r\n      this.eventListeners[event],\r\n      !this.options.preventMouseEventsDefault ? passiveListenerOption : false\r\n    );\r\n  }\r\n\r\n  // Zoom using mouse wheel\r\n  if (this.options.mouseWheelZoomEnabled) {\r\n    this.options.mouseWheelZoomEnabled = false; // set to false as enable will set it back to true\r\n    this.enableMouseWheelZoom();\r\n  }\r\n};\r\n\r\n/**\r\n * Enable ability to zoom using mouse wheel\r\n */\r\nSvgPanZoom.prototype.enableMouseWheelZoom = function() {\r\n  if (!this.options.mouseWheelZoomEnabled) {\r\n    var that = this;\r\n\r\n    // Mouse wheel listener\r\n    this.wheelListener = function(evt) {\r\n      return that.handleMouseWheel(evt);\r\n    };\r\n\r\n    // Bind wheelListener\r\n    var isPassiveListener = !this.options.preventMouseEventsDefault;\r\n    Wheel.on(\r\n      this.options.eventsListenerElement || this.svg,\r\n      this.wheelListener,\r\n      isPassiveListener\r\n    );\r\n\r\n    this.options.mouseWheelZoomEnabled = true;\r\n  }\r\n};\r\n\r\n/**\r\n * Disable ability to zoom using mouse wheel\r\n */\r\nSvgPanZoom.prototype.disableMouseWheelZoom = function() {\r\n  if (this.options.mouseWheelZoomEnabled) {\r\n    var isPassiveListener = !this.options.preventMouseEventsDefault;\r\n    Wheel.off(\r\n      this.options.eventsListenerElement || this.svg,\r\n      this.wheelListener,\r\n      isPassiveListener\r\n    );\r\n    this.options.mouseWheelZoomEnabled = false;\r\n  }\r\n};\r\n\r\n/**\r\n * Handle mouse wheel event\r\n *\r\n * @param  {Event} evt\r\n */\r\nSvgPanZoom.prototype.handleMouseWheel = function(evt) {\r\n  if (!this.options.zoomEnabled || this.state !== \"none\") {\r\n    return;\r\n  }\r\n\r\n  if (this.options.preventMouseEventsDefault) {\r\n    if (evt.preventDefault) {\r\n      evt.preventDefault();\r\n    } else {\r\n      evt.returnValue = false;\r\n    }\r\n  }\r\n\r\n  // Default delta in case that deltaY is not available\r\n  var delta = evt.deltaY || 1,\r\n    timeDelta = Date.now() - this.lastMouseWheelEventTime,\r\n    divider = 3 + Math.max(0, 30 - timeDelta);\r\n\r\n  // Update cache\r\n  this.lastMouseWheelEventTime = Date.now();\r\n\r\n  // Make empirical adjustments for browsers that give deltaY in pixels (deltaMode=0)\r\n  if (\"deltaMode\" in evt && evt.deltaMode === 0 && evt.wheelDelta) {\r\n    delta = evt.deltaY === 0 ? 0 : Math.abs(evt.wheelDelta) / evt.deltaY;\r\n  }\r\n\r\n  delta =\r\n    -0.3 < delta && delta < 0.3\r\n      ? delta\r\n      : ((delta > 0 ? 1 : -1) * Math.log(Math.abs(delta) + 10)) / divider;\r\n\r\n  var inversedScreenCTM = this.svg.getScreenCTM().inverse(),\r\n    relativeMousePoint = SvgUtils.getEventPoint(evt, this.svg).matrixTransform(\r\n      inversedScreenCTM\r\n    ),\r\n    zoom = Math.pow(1 + this.options.zoomScaleSensitivity, -1 * delta); // multiplying by neg. 1 so as to make zoom in/out behavior match Google maps behavior\r\n\r\n  this.zoomAtPoint(zoom, relativeMousePoint);\r\n};\r\n\r\n/**\r\n * Zoom in at a SVG point\r\n *\r\n * @param  {SVGPoint} point\r\n * @param  {Float} zoomScale    Number representing how much to zoom\r\n * @param  {Boolean} zoomAbsolute Default false. If true, zoomScale is treated as an absolute value.\r\n *                                Otherwise, zoomScale is treated as a multiplied (e.g. 1.10 would zoom in 10%)\r\n */\r\nSvgPanZoom.prototype.zoomAtPoint = function(zoomScale, point, zoomAbsolute) {\r\n  var originalState = this.viewport.getOriginalState();\r\n\r\n  if (!zoomAbsolute) {\r\n    // Fit zoomScale in set bounds\r\n    if (\r\n      this.getZoom() * zoomScale <\r\n      this.options.minZoom * originalState.zoom\r\n    ) {\r\n      zoomScale = (this.options.minZoom * originalState.zoom) / this.getZoom();\r\n    } else if (\r\n      this.getZoom() * zoomScale >\r\n      this.options.maxZoom * originalState.zoom\r\n    ) {\r\n      zoomScale = (this.options.maxZoom * originalState.zoom) / this.getZoom();\r\n    }\r\n  } else {\r\n    // Fit zoomScale in set bounds\r\n    zoomScale = Math.max(\r\n      this.options.minZoom * originalState.zoom,\r\n      Math.min(this.options.maxZoom * originalState.zoom, zoomScale)\r\n    );\r\n    // Find relative scale to achieve desired scale\r\n    zoomScale = zoomScale / this.getZoom();\r\n  }\r\n\r\n  var oldCTM = this.viewport.getCTM(),\r\n    relativePoint = point.matrixTransform(oldCTM.inverse()),\r\n    modifier = this.svg\r\n      .createSVGMatrix()\r\n      .translate(relativePoint.x, relativePoint.y)\r\n      .scale(zoomScale)\r\n      .translate(-relativePoint.x, -relativePoint.y),\r\n    newCTM = oldCTM.multiply(modifier);\r\n\r\n  if (newCTM.a !== oldCTM.a) {\r\n    this.viewport.setCTM(newCTM);\r\n  }\r\n};\r\n\r\n/**\r\n * Zoom at center point\r\n *\r\n * @param  {Float} scale\r\n * @param  {Boolean} absolute Marks zoom scale as relative or absolute\r\n */\r\nSvgPanZoom.prototype.zoom = function(scale, absolute) {\r\n  this.zoomAtPoint(\r\n    scale,\r\n    SvgUtils.getSvgCenterPoint(this.svg, this.width, this.height),\r\n    absolute\r\n  );\r\n};\r\n\r\n/**\r\n * Zoom used by public instance\r\n *\r\n * @param  {Float} scale\r\n * @param  {Boolean} absolute Marks zoom scale as relative or absolute\r\n */\r\nSvgPanZoom.prototype.publicZoom = function(scale, absolute) {\r\n  if (absolute) {\r\n    scale = this.computeFromRelativeZoom(scale);\r\n  }\r\n\r\n  this.zoom(scale, absolute);\r\n};\r\n\r\n/**\r\n * Zoom at point used by public instance\r\n *\r\n * @param  {Float} scale\r\n * @param  {SVGPoint|Object} point    An object that has x and y attributes\r\n * @param  {Boolean} absolute Marks zoom scale as relative or absolute\r\n */\r\nSvgPanZoom.prototype.publicZoomAtPoint = function(scale, point, absolute) {\r\n  if (absolute) {\r\n    // Transform zoom into a relative value\r\n    scale = this.computeFromRelativeZoom(scale);\r\n  }\r\n\r\n  // If not a SVGPoint but has x and y then create a SVGPoint\r\n  if (Utils.getType(point) !== \"SVGPoint\") {\r\n    if (\"x\" in point && \"y\" in point) {\r\n      point = SvgUtils.createSVGPoint(this.svg, point.x, point.y);\r\n    } else {\r\n      throw new Error(\"Given point is invalid\");\r\n    }\r\n  }\r\n\r\n  this.zoomAtPoint(scale, point, absolute);\r\n};\r\n\r\n/**\r\n * Get zoom scale\r\n *\r\n * @return {Float} zoom scale\r\n */\r\nSvgPanZoom.prototype.getZoom = function() {\r\n  return this.viewport.getZoom();\r\n};\r\n\r\n/**\r\n * Get zoom scale for public usage\r\n *\r\n * @return {Float} zoom scale\r\n */\r\nSvgPanZoom.prototype.getRelativeZoom = function() {\r\n  return this.viewport.getRelativeZoom();\r\n};\r\n\r\n/**\r\n * Compute actual zoom from public zoom\r\n *\r\n * @param  {Float} zoom\r\n * @return {Float} zoom scale\r\n */\r\nSvgPanZoom.prototype.computeFromRelativeZoom = function(zoom) {\r\n  return zoom * this.viewport.getOriginalState().zoom;\r\n};\r\n\r\n/**\r\n * Set zoom to initial state\r\n */\r\nSvgPanZoom.prototype.resetZoom = function() {\r\n  var originalState = this.viewport.getOriginalState();\r\n\r\n  this.zoom(originalState.zoom, true);\r\n};\r\n\r\n/**\r\n * Set pan to initial state\r\n */\r\nSvgPanZoom.prototype.resetPan = function() {\r\n  this.pan(this.viewport.getOriginalState());\r\n};\r\n\r\n/**\r\n * Set pan and zoom to initial state\r\n */\r\nSvgPanZoom.prototype.reset = function() {\r\n  this.resetZoom();\r\n  this.resetPan();\r\n};\r\n\r\n/**\r\n * Handle double click event\r\n * See handleMouseDown() for alternate detection method\r\n *\r\n * @param {Event} evt\r\n */\r\nSvgPanZoom.prototype.handleDblClick = function(evt) {\r\n  if (this.options.preventMouseEventsDefault) {\r\n    if (evt.preventDefault) {\r\n      evt.preventDefault();\r\n    } else {\r\n      evt.returnValue = false;\r\n    }\r\n  }\r\n\r\n  // Check if target was a control button\r\n  if (this.options.controlIconsEnabled) {\r\n    var targetClass = evt.target.getAttribute(\"class\") || \"\";\r\n    if (targetClass.indexOf(\"svg-pan-zoom-control\") > -1) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  var zoomFactor;\r\n\r\n  if (evt.shiftKey) {\r\n    zoomFactor = 1 / ((1 + this.options.zoomScaleSensitivity) * 2); // zoom out when shift key pressed\r\n  } else {\r\n    zoomFactor = (1 + this.options.zoomScaleSensitivity) * 2;\r\n  }\r\n\r\n  var point = SvgUtils.getEventPoint(evt, this.svg).matrixTransform(\r\n    this.svg.getScreenCTM().inverse()\r\n  );\r\n  this.zoomAtPoint(zoomFactor, point);\r\n};\r\n\r\n/**\r\n * Handle click event\r\n *\r\n * @param {Event} evt\r\n */\r\nSvgPanZoom.prototype.handleMouseDown = function(evt, prevEvt) {\r\n  if (this.options.preventMouseEventsDefault) {\r\n    if (evt.preventDefault) {\r\n      evt.preventDefault();\r\n    } else {\r\n      evt.returnValue = false;\r\n    }\r\n  }\r\n\r\n  Utils.mouseAndTouchNormalize(evt, this.svg);\r\n\r\n  // Double click detection; more consistent than ondblclick\r\n  if (this.options.dblClickZoomEnabled && Utils.isDblClick(evt, prevEvt)) {\r\n    this.handleDblClick(evt);\r\n  } else {\r\n    // Pan mode\r\n    this.state = \"pan\";\r\n    this.firstEventCTM = this.viewport.getCTM();\r\n    this.stateOrigin = SvgUtils.getEventPoint(evt, this.svg).matrixTransform(\r\n      this.firstEventCTM.inverse()\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Handle mouse move event\r\n *\r\n * @param  {Event} evt\r\n */\r\nSvgPanZoom.prototype.handleMouseMove = function(evt) {\r\n  if (this.options.preventMouseEventsDefault) {\r\n    if (evt.preventDefault) {\r\n      evt.preventDefault();\r\n    } else {\r\n      evt.returnValue = false;\r\n    }\r\n  }\r\n\r\n  if (this.state === \"pan\" && this.options.panEnabled) {\r\n    // Pan mode\r\n    var point = SvgUtils.getEventPoint(evt, this.svg).matrixTransform(\r\n        this.firstEventCTM.inverse()\r\n      ),\r\n      viewportCTM = this.firstEventCTM.translate(\r\n        point.x - this.stateOrigin.x,\r\n        point.y - this.stateOrigin.y\r\n      );\r\n\r\n    this.viewport.setCTM(viewportCTM);\r\n  }\r\n};\r\n\r\n/**\r\n * Handle mouse button release event\r\n *\r\n * @param {Event} evt\r\n */\r\nSvgPanZoom.prototype.handleMouseUp = function(evt) {\r\n  if (this.options.preventMouseEventsDefault) {\r\n    if (evt.preventDefault) {\r\n      evt.preventDefault();\r\n    } else {\r\n      evt.returnValue = false;\r\n    }\r\n  }\r\n\r\n  if (this.state === \"pan\") {\r\n    // Quit pan mode\r\n    this.state = \"none\";\r\n  }\r\n};\r\n\r\n/**\r\n * Adjust viewport size (only) so it will fit in SVG\r\n * Does not center image\r\n */\r\nSvgPanZoom.prototype.fit = function() {\r\n  var viewBox = this.viewport.getViewBox(),\r\n    newScale = Math.min(\r\n      this.width / viewBox.width,\r\n      this.height / viewBox.height\r\n    );\r\n\r\n  this.zoom(newScale, true);\r\n};\r\n\r\n/**\r\n * Adjust viewport size (only) so it will contain the SVG\r\n * Does not center image\r\n */\r\nSvgPanZoom.prototype.contain = function() {\r\n  var viewBox = this.viewport.getViewBox(),\r\n    newScale = Math.max(\r\n      this.width / viewBox.width,\r\n      this.height / viewBox.height\r\n    );\r\n\r\n  this.zoom(newScale, true);\r\n};\r\n\r\n/**\r\n * Adjust viewport pan (only) so it will be centered in SVG\r\n * Does not zoom/fit/contain image\r\n */\r\nSvgPanZoom.prototype.center = function() {\r\n  var viewBox = this.viewport.getViewBox(),\r\n    offsetX =\r\n      (this.width - (viewBox.width + viewBox.x * 2) * this.getZoom()) * 0.5,\r\n    offsetY =\r\n      (this.height - (viewBox.height + viewBox.y * 2) * this.getZoom()) * 0.5;\r\n\r\n  this.getPublicInstance().pan({ x: offsetX, y: offsetY });\r\n};\r\n\r\n/**\r\n * Update content cached BorderBox\r\n * Use when viewport contents change\r\n */\r\nSvgPanZoom.prototype.updateBBox = function() {\r\n  this.viewport.simpleViewBoxCache();\r\n};\r\n\r\n/**\r\n * Pan to a rendered position\r\n *\r\n * @param  {Object} point {x: 0, y: 0}\r\n */\r\nSvgPanZoom.prototype.pan = function(point) {\r\n  var viewportCTM = this.viewport.getCTM();\r\n  viewportCTM.e = point.x;\r\n  viewportCTM.f = point.y;\r\n  this.viewport.setCTM(viewportCTM);\r\n};\r\n\r\n/**\r\n * Relatively pan the graph by a specified rendered position vector\r\n *\r\n * @param  {Object} point {x: 0, y: 0}\r\n */\r\nSvgPanZoom.prototype.panBy = function(point) {\r\n  var viewportCTM = this.viewport.getCTM();\r\n  viewportCTM.e += point.x;\r\n  viewportCTM.f += point.y;\r\n  this.viewport.setCTM(viewportCTM);\r\n};\r\n\r\n/**\r\n * Get pan vector\r\n *\r\n * @return {Object} {x: 0, y: 0}\r\n */\r\nSvgPanZoom.prototype.getPan = function() {\r\n  var state = this.viewport.getState();\r\n\r\n  return { x: state.x, y: state.y };\r\n};\r\n\r\n/**\r\n * Recalculates cached svg dimensions and controls position\r\n */\r\nSvgPanZoom.prototype.resize = function() {\r\n  // Get dimensions\r\n  var boundingClientRectNormalized = SvgUtils.getBoundingClientRectNormalized(\r\n    this.svg\r\n  );\r\n  this.width = boundingClientRectNormalized.width;\r\n  this.height = boundingClientRectNormalized.height;\r\n\r\n  // Recalculate original state\r\n  var viewport = this.viewport;\r\n  viewport.options.width = this.width;\r\n  viewport.options.height = this.height;\r\n  viewport.processCTM();\r\n\r\n  // Reposition control icons by re-enabling them\r\n  if (this.options.controlIconsEnabled) {\r\n    this.getPublicInstance().disableControlIcons();\r\n    this.getPublicInstance().enableControlIcons();\r\n  }\r\n};\r\n\r\n/**\r\n * Unbind mouse events, free callbacks and destroy public instance\r\n */\r\nSvgPanZoom.prototype.destroy = function() {\r\n  var that = this;\r\n\r\n  // Free callbacks\r\n  this.beforeZoom = null;\r\n  this.onZoom = null;\r\n  this.beforePan = null;\r\n  this.onPan = null;\r\n  this.onUpdatedCTM = null;\r\n\r\n  // Destroy custom event handlers\r\n  // eslint-disable-next-line eqeqeq\r\n  if (this.options.customEventsHandler != null) {\r\n    this.options.customEventsHandler.destroy({\r\n      svgElement: this.svg,\r\n      eventsListenerElement: this.options.eventsListenerElement,\r\n      instance: this.getPublicInstance()\r\n    });\r\n  }\r\n\r\n  // Unbind eventListeners\r\n  for (var event in this.eventListeners) {\r\n    (this.options.eventsListenerElement || this.svg).removeEventListener(\r\n      event,\r\n      this.eventListeners[event],\r\n      !this.options.preventMouseEventsDefault ? passiveListenerOption : false\r\n    );\r\n  }\r\n\r\n  // Unbind wheelListener\r\n  this.disableMouseWheelZoom();\r\n\r\n  // Remove control icons\r\n  this.getPublicInstance().disableControlIcons();\r\n\r\n  // Reset zoom and pan\r\n  this.reset();\r\n\r\n  // Remove instance from instancesStore\r\n  instancesStore = instancesStore.filter(function(instance) {\r\n    return instance.svg !== that.svg;\r\n  });\r\n\r\n  // Delete options and its contents\r\n  delete this.options;\r\n\r\n  // Delete viewport to make public shadow viewport functions uncallable\r\n  delete this.viewport;\r\n\r\n  // Destroy public instance and rewrite getPublicInstance\r\n  delete this.publicInstance;\r\n  delete this.pi;\r\n  this.getPublicInstance = function() {\r\n    return null;\r\n  };\r\n};\r\n\r\n/**\r\n * Returns a public instance object\r\n *\r\n * @return {Object} Public instance object\r\n */\r\nSvgPanZoom.prototype.getPublicInstance = function() {\r\n  var that = this;\r\n\r\n  // Create cache\r\n  if (!this.publicInstance) {\r\n    this.publicInstance = this.pi = {\r\n      // Pan\r\n      enablePan: function() {\r\n        that.options.panEnabled = true;\r\n        return that.pi;\r\n      },\r\n      disablePan: function() {\r\n        that.options.panEnabled = false;\r\n        return that.pi;\r\n      },\r\n      isPanEnabled: function() {\r\n        return !!that.options.panEnabled;\r\n      },\r\n      pan: function(point) {\r\n        that.pan(point);\r\n        return that.pi;\r\n      },\r\n      panBy: function(point) {\r\n        that.panBy(point);\r\n        return that.pi;\r\n      },\r\n      getPan: function() {\r\n        return that.getPan();\r\n      },\r\n      // Pan event\r\n      setBeforePan: function(fn) {\r\n        that.options.beforePan =\r\n          fn === null ? null : Utils.proxy(fn, that.publicInstance);\r\n        return that.pi;\r\n      },\r\n      setOnPan: function(fn) {\r\n        that.options.onPan =\r\n          fn === null ? null : Utils.proxy(fn, that.publicInstance);\r\n        return that.pi;\r\n      },\r\n      // Zoom and Control Icons\r\n      enableZoom: function() {\r\n        that.options.zoomEnabled = true;\r\n        return that.pi;\r\n      },\r\n      disableZoom: function() {\r\n        that.options.zoomEnabled = false;\r\n        return that.pi;\r\n      },\r\n      isZoomEnabled: function() {\r\n        return !!that.options.zoomEnabled;\r\n      },\r\n      enableControlIcons: function() {\r\n        if (!that.options.controlIconsEnabled) {\r\n          that.options.controlIconsEnabled = true;\r\n          ControlIcons.enable(that);\r\n        }\r\n        return that.pi;\r\n      },\r\n      disableControlIcons: function() {\r\n        if (that.options.controlIconsEnabled) {\r\n          that.options.controlIconsEnabled = false;\r\n          ControlIcons.disable(that);\r\n        }\r\n        return that.pi;\r\n      },\r\n      isControlIconsEnabled: function() {\r\n        return !!that.options.controlIconsEnabled;\r\n      },\r\n      // Double click zoom\r\n      enableDblClickZoom: function() {\r\n        that.options.dblClickZoomEnabled = true;\r\n        return that.pi;\r\n      },\r\n      disableDblClickZoom: function() {\r\n        that.options.dblClickZoomEnabled = false;\r\n        return that.pi;\r\n      },\r\n      isDblClickZoomEnabled: function() {\r\n        return !!that.options.dblClickZoomEnabled;\r\n      },\r\n      // Mouse wheel zoom\r\n      enableMouseWheelZoom: function() {\r\n        that.enableMouseWheelZoom();\r\n        return that.pi;\r\n      },\r\n      disableMouseWheelZoom: function() {\r\n        that.disableMouseWheelZoom();\r\n        return that.pi;\r\n      },\r\n      isMouseWheelZoomEnabled: function() {\r\n        return !!that.options.mouseWheelZoomEnabled;\r\n      },\r\n      // Zoom scale and bounds\r\n      setZoomScaleSensitivity: function(scale) {\r\n        that.options.zoomScaleSensitivity = scale;\r\n        return that.pi;\r\n      },\r\n      setMinZoom: function(zoom) {\r\n        that.options.minZoom = zoom;\r\n        return that.pi;\r\n      },\r\n      setMaxZoom: function(zoom) {\r\n        that.options.maxZoom = zoom;\r\n        return that.pi;\r\n      },\r\n      // Zoom event\r\n      setBeforeZoom: function(fn) {\r\n        that.options.beforeZoom =\r\n          fn === null ? null : Utils.proxy(fn, that.publicInstance);\r\n        return that.pi;\r\n      },\r\n      setOnZoom: function(fn) {\r\n        that.options.onZoom =\r\n          fn === null ? null : Utils.proxy(fn, that.publicInstance);\r\n        return that.pi;\r\n      },\r\n      // Zooming\r\n      zoom: function(scale) {\r\n        that.publicZoom(scale, true);\r\n        return that.pi;\r\n      },\r\n      zoomBy: function(scale) {\r\n        that.publicZoom(scale, false);\r\n        return that.pi;\r\n      },\r\n      zoomAtPoint: function(scale, point) {\r\n        that.publicZoomAtPoint(scale, point, true);\r\n        return that.pi;\r\n      },\r\n      zoomAtPointBy: function(scale, point) {\r\n        that.publicZoomAtPoint(scale, point, false);\r\n        return that.pi;\r\n      },\r\n      zoomIn: function() {\r\n        this.zoomBy(1 + that.options.zoomScaleSensitivity);\r\n        return that.pi;\r\n      },\r\n      zoomOut: function() {\r\n        this.zoomBy(1 / (1 + that.options.zoomScaleSensitivity));\r\n        return that.pi;\r\n      },\r\n      getZoom: function() {\r\n        return that.getRelativeZoom();\r\n      },\r\n      // CTM update\r\n      setOnUpdatedCTM: function(fn) {\r\n        that.options.onUpdatedCTM =\r\n          fn === null ? null : Utils.proxy(fn, that.publicInstance);\r\n        return that.pi;\r\n      },\r\n      // Reset\r\n      resetZoom: function() {\r\n        that.resetZoom();\r\n        return that.pi;\r\n      },\r\n      resetPan: function() {\r\n        that.resetPan();\r\n        return that.pi;\r\n      },\r\n      reset: function() {\r\n        that.reset();\r\n        return that.pi;\r\n      },\r\n      // Fit, Contain and Center\r\n      fit: function() {\r\n        that.fit();\r\n        return that.pi;\r\n      },\r\n      contain: function() {\r\n        that.contain();\r\n        return that.pi;\r\n      },\r\n      center: function() {\r\n        that.center();\r\n        return that.pi;\r\n      },\r\n      // Size and Resize\r\n      updateBBox: function() {\r\n        that.updateBBox();\r\n        return that.pi;\r\n      },\r\n      resize: function() {\r\n        that.resize();\r\n        return that.pi;\r\n      },\r\n      getSizes: function() {\r\n        return {\r\n          width: that.width,\r\n          height: that.height,\r\n          realZoom: that.getZoom(),\r\n          viewBox: that.viewport.getViewBox()\r\n        };\r\n      },\r\n      // Destroy\r\n      destroy: function() {\r\n        that.destroy();\r\n        return that.pi;\r\n      }\r\n    };\r\n  }\r\n\r\n  return this.publicInstance;\r\n};\r\n\r\n/**\r\n * Stores pairs of instances of SvgPanZoom and SVG\r\n * Each pair is represented by an object {svg: SVGSVGElement, instance: SvgPanZoom}\r\n *\r\n * @type {Array}\r\n */\r\nvar instancesStore = [];\r\n\r\nvar svgPanZoom = function(elementOrSelector, options) {\r\n  var svg = Utils.getSvg(elementOrSelector);\r\n\r\n  if (svg === null) {\r\n    return null;\r\n  } else {\r\n    // Look for existent instance\r\n    for (var i = instancesStore.length - 1; i >= 0; i--) {\r\n      if (instancesStore[i].svg === svg) {\r\n        return instancesStore[i].instance.getPublicInstance();\r\n      }\r\n    }\r\n\r\n    // If instance not found - create one\r\n    instancesStore.push({\r\n      svg: svg,\r\n      instance: new SvgPanZoom(svg, options)\r\n    });\r\n\r\n    // Return just pushed instance\r\n    return instancesStore[\r\n      instancesStore.length - 1\r\n    ].instance.getPublicInstance();\r\n  }\r\n};\r\n\r\nmodule.exports = svgPanZoom;\r\n","// uniwheel 0.1.2 (customized)\r\n// A unified cross browser mouse wheel event handler\r\n// https://github.com/teemualap/uniwheel\r\n\r\nmodule.exports = (function(){\r\n\r\n  //Full details: https://developer.mozilla.org/en-US/docs/Web/Reference/Events/wheel\r\n\r\n  var prefix = \"\", _addEventListener, _removeEventListener, support, fns = [];\r\n  var passiveOption = {passive: true};\r\n\r\n  // detect event model\r\n  if ( window.addEventListener ) {\r\n    _addEventListener = \"addEventListener\";\r\n    _removeEventListener = \"removeEventListener\";\r\n  } else {\r\n    _addEventListener = \"attachEvent\";\r\n    _removeEventListener = \"detachEvent\";\r\n    prefix = \"on\";\r\n  }\r\n\r\n  // detect available wheel event\r\n  support = \"onwheel\" in document.createElement(\"div\") ? \"wheel\" : // Modern browsers support \"wheel\"\r\n            document.onmousewheel !== undefined ? \"mousewheel\" : // Webkit and IE support at least \"mousewheel\"\r\n            \"DOMMouseScroll\"; // let's assume that remaining browsers are older Firefox\r\n\r\n\r\n  function createCallback(element,callback) {\r\n\r\n    var fn = function(originalEvent) {\r\n\r\n      !originalEvent && ( originalEvent = window.event );\r\n\r\n      // create a normalized event object\r\n      var event = {\r\n        // keep a ref to the original event object\r\n        originalEvent: originalEvent,\r\n        target: originalEvent.target || originalEvent.srcElement,\r\n        type: \"wheel\",\r\n        deltaMode: originalEvent.type == \"MozMousePixelScroll\" ? 0 : 1,\r\n        deltaX: 0,\r\n        delatZ: 0,\r\n        preventDefault: function() {\r\n          originalEvent.preventDefault ?\r\n            originalEvent.preventDefault() :\r\n            originalEvent.returnValue = false;\r\n        }\r\n      };\r\n\r\n      // calculate deltaY (and deltaX) according to the event\r\n      if ( support == \"mousewheel\" ) {\r\n        event.deltaY = - 1/40 * originalEvent.wheelDelta;\r\n        // Webkit also support wheelDeltaX\r\n        originalEvent.wheelDeltaX && ( event.deltaX = - 1/40 * originalEvent.wheelDeltaX );\r\n      } else {\r\n        event.deltaY = originalEvent.detail;\r\n      }\r\n\r\n      // it's time to fire the callback\r\n      return callback( event );\r\n\r\n    };\r\n\r\n    fns.push({\r\n      element: element,\r\n      fn: fn,\r\n    });\r\n\r\n    return fn;\r\n  }\r\n\r\n  function getCallback(element) {\r\n    for (var i = 0; i < fns.length; i++) {\r\n      if (fns[i].element === element) {\r\n        return fns[i].fn;\r\n      }\r\n    }\r\n    return function(){};\r\n  }\r\n\r\n  function removeCallback(element) {\r\n    for (var i = 0; i < fns.length; i++) {\r\n      if (fns[i].element === element) {\r\n        return fns.splice(i,1);\r\n      }\r\n    }\r\n  }\r\n\r\n  function _addWheelListener(elem, eventName, callback, isPassiveListener ) {\r\n    var cb;\r\n\r\n    if (support === \"wheel\") {\r\n      cb = callback;\r\n    } else {\r\n      cb = createCallback(elem, callback);\r\n    }\r\n\r\n    elem[_addEventListener](prefix + eventName, cb, isPassiveListener ? passiveOption : false);\r\n  }\r\n\r\n  function _removeWheelListener(elem, eventName, callback, isPassiveListener ) {\r\n\r\n    var cb;\r\n\r\n    if (support === \"wheel\") {\r\n      cb = callback;\r\n    } else {\r\n      cb = getCallback(elem);\r\n    }\r\n\r\n    elem[_removeEventListener](prefix + eventName, cb, isPassiveListener ? passiveOption : false);\r\n\r\n    removeCallback(elem);\r\n  }\r\n\r\n  function addWheelListener( elem, callback, isPassiveListener ) {\r\n    _addWheelListener(elem, support, callback, isPassiveListener );\r\n\r\n    // handle MozMousePixelScroll in older Firefox\r\n    if( support == \"DOMMouseScroll\" ) {\r\n      _addWheelListener(elem, \"MozMousePixelScroll\", callback, isPassiveListener );\r\n    }\r\n  }\r\n\r\n  function removeWheelListener(elem, callback, isPassiveListener){\r\n    _removeWheelListener(elem, support, callback, isPassiveListener);\r\n\r\n    // handle MozMousePixelScroll in older Firefox\r\n    if( support == \"DOMMouseScroll\" ) {\r\n      _removeWheelListener(elem, \"MozMousePixelScroll\", callback, isPassiveListener);\r\n    }\r\n  }\r\n\r\n  return {\r\n    on: addWheelListener,\r\n    off: removeWheelListener\r\n  };\r\n\r\n})();\r\n","var SvgUtils = require(\"./svg-utilities\");\r\n\r\nmodule.exports = {\r\n  enable: function(instance) {\r\n    // Select (and create if necessary) defs\r\n    var defs = instance.svg.querySelector(\"defs\");\r\n    if (!defs) {\r\n      defs = document.createElementNS(SvgUtils.svgNS, \"defs\");\r\n      instance.svg.appendChild(defs);\r\n    }\r\n\r\n    // Check for style element, and create it if it doesn't exist\r\n    var styleEl = defs.querySelector(\"style#svg-pan-zoom-controls-styles\");\r\n    if (!styleEl) {\r\n      var style = document.createElementNS(SvgUtils.svgNS, \"style\");\r\n      style.setAttribute(\"id\", \"svg-pan-zoom-controls-styles\");\r\n      style.setAttribute(\"type\", \"text/css\");\r\n      style.textContent =\r\n        \".svg-pan-zoom-control { cursor: pointer; fill: black; fill-opacity: 0.333; } .svg-pan-zoom-control:hover { fill-opacity: 0.8; } .svg-pan-zoom-control-background { fill: white; fill-opacity: 0.5; } .svg-pan-zoom-control-background { fill-opacity: 0.8; }\";\r\n      defs.appendChild(style);\r\n    }\r\n\r\n    // Zoom Group\r\n    var zoomGroup = document.createElementNS(SvgUtils.svgNS, \"g\");\r\n    zoomGroup.setAttribute(\"id\", \"svg-pan-zoom-controls\");\r\n    zoomGroup.setAttribute(\r\n      \"transform\",\r\n      \"translate(\" +\r\n        (instance.width - 70) +\r\n        \" \" +\r\n        (instance.height - 76) +\r\n        \") scale(0.75)\"\r\n    );\r\n    zoomGroup.setAttribute(\"class\", \"svg-pan-zoom-control\");\r\n\r\n    // Control elements\r\n    zoomGroup.appendChild(this._createZoomIn(instance));\r\n    zoomGroup.appendChild(this._createZoomReset(instance));\r\n    zoomGroup.appendChild(this._createZoomOut(instance));\r\n\r\n    // Finally append created element\r\n    instance.svg.appendChild(zoomGroup);\r\n\r\n    // Cache control instance\r\n    instance.controlIcons = zoomGroup;\r\n  },\r\n\r\n  _createZoomIn: function(instance) {\r\n    var zoomIn = document.createElementNS(SvgUtils.svgNS, \"g\");\r\n    zoomIn.setAttribute(\"id\", \"svg-pan-zoom-zoom-in\");\r\n    zoomIn.setAttribute(\"transform\", \"translate(30.5 5) scale(0.015)\");\r\n    zoomIn.setAttribute(\"class\", \"svg-pan-zoom-control\");\r\n    zoomIn.addEventListener(\r\n      \"click\",\r\n      function() {\r\n        instance.getPublicInstance().zoomIn();\r\n      },\r\n      false\r\n    );\r\n    zoomIn.addEventListener(\r\n      \"touchstart\",\r\n      function() {\r\n        instance.getPublicInstance().zoomIn();\r\n      },\r\n      false\r\n    );\r\n\r\n    var zoomInBackground = document.createElementNS(SvgUtils.svgNS, \"rect\"); // TODO change these background space fillers to rounded rectangles so they look prettier\r\n    zoomInBackground.setAttribute(\"x\", \"0\");\r\n    zoomInBackground.setAttribute(\"y\", \"0\");\r\n    zoomInBackground.setAttribute(\"width\", \"1500\"); // larger than expected because the whole group is transformed to scale down\r\n    zoomInBackground.setAttribute(\"height\", \"1400\");\r\n    zoomInBackground.setAttribute(\"class\", \"svg-pan-zoom-control-background\");\r\n    zoomIn.appendChild(zoomInBackground);\r\n\r\n    var zoomInShape = document.createElementNS(SvgUtils.svgNS, \"path\");\r\n    zoomInShape.setAttribute(\r\n      \"d\",\r\n      \"M1280 576v128q0 26 -19 45t-45 19h-320v320q0 26 -19 45t-45 19h-128q-26 0 -45 -19t-19 -45v-320h-320q-26 0 -45 -19t-19 -45v-128q0 -26 19 -45t45 -19h320v-320q0 -26 19 -45t45 -19h128q26 0 45 19t19 45v320h320q26 0 45 19t19 45zM1536 1120v-960 q0 -119 -84.5 -203.5t-203.5 -84.5h-960q-119 0 -203.5 84.5t-84.5 203.5v960q0 119 84.5 203.5t203.5 84.5h960q119 0 203.5 -84.5t84.5 -203.5z\"\r\n    );\r\n    zoomInShape.setAttribute(\"class\", \"svg-pan-zoom-control-element\");\r\n    zoomIn.appendChild(zoomInShape);\r\n\r\n    return zoomIn;\r\n  },\r\n\r\n  _createZoomReset: function(instance) {\r\n    // reset\r\n    var resetPanZoomControl = document.createElementNS(SvgUtils.svgNS, \"g\");\r\n    resetPanZoomControl.setAttribute(\"id\", \"svg-pan-zoom-reset-pan-zoom\");\r\n    resetPanZoomControl.setAttribute(\"transform\", \"translate(5 35) scale(0.4)\");\r\n    resetPanZoomControl.setAttribute(\"class\", \"svg-pan-zoom-control\");\r\n    resetPanZoomControl.addEventListener(\r\n      \"click\",\r\n      function() {\r\n        instance.getPublicInstance().reset();\r\n      },\r\n      false\r\n    );\r\n    resetPanZoomControl.addEventListener(\r\n      \"touchstart\",\r\n      function() {\r\n        instance.getPublicInstance().reset();\r\n      },\r\n      false\r\n    );\r\n\r\n    var resetPanZoomControlBackground = document.createElementNS(\r\n      SvgUtils.svgNS,\r\n      \"rect\"\r\n    ); // TODO change these background space fillers to rounded rectangles so they look prettier\r\n    resetPanZoomControlBackground.setAttribute(\"x\", \"2\");\r\n    resetPanZoomControlBackground.setAttribute(\"y\", \"2\");\r\n    resetPanZoomControlBackground.setAttribute(\"width\", \"182\"); // larger than expected because the whole group is transformed to scale down\r\n    resetPanZoomControlBackground.setAttribute(\"height\", \"58\");\r\n    resetPanZoomControlBackground.setAttribute(\r\n      \"class\",\r\n      \"svg-pan-zoom-control-background\"\r\n    );\r\n    resetPanZoomControl.appendChild(resetPanZoomControlBackground);\r\n\r\n    var resetPanZoomControlShape1 = document.createElementNS(\r\n      SvgUtils.svgNS,\r\n      \"path\"\r\n    );\r\n    resetPanZoomControlShape1.setAttribute(\r\n      \"d\",\r\n      \"M33.051,20.632c-0.742-0.406-1.854-0.609-3.338-0.609h-7.969v9.281h7.769c1.543,0,2.701-0.188,3.473-0.562c1.365-0.656,2.048-1.953,2.048-3.891C35.032,22.757,34.372,21.351,33.051,20.632z\"\r\n    );\r\n    resetPanZoomControlShape1.setAttribute(\r\n      \"class\",\r\n      \"svg-pan-zoom-control-element\"\r\n    );\r\n    resetPanZoomControl.appendChild(resetPanZoomControlShape1);\r\n\r\n    var resetPanZoomControlShape2 = document.createElementNS(\r\n      SvgUtils.svgNS,\r\n      \"path\"\r\n    );\r\n    resetPanZoomControlShape2.setAttribute(\r\n      \"d\",\r\n      \"M170.231,0.5H15.847C7.102,0.5,0.5,5.708,0.5,11.84v38.861C0.5,56.833,7.102,61.5,15.847,61.5h154.384c8.745,0,15.269-4.667,15.269-10.798V11.84C185.5,5.708,178.976,0.5,170.231,0.5z M42.837,48.569h-7.969c-0.219-0.766-0.375-1.383-0.469-1.852c-0.188-0.969-0.289-1.961-0.305-2.977l-0.047-3.211c-0.03-2.203-0.41-3.672-1.142-4.406c-0.732-0.734-2.103-1.102-4.113-1.102h-7.05v13.547h-7.055V14.022h16.524c2.361,0.047,4.178,0.344,5.45,0.891c1.272,0.547,2.351,1.352,3.234,2.414c0.731,0.875,1.31,1.844,1.737,2.906s0.64,2.273,0.64,3.633c0,1.641-0.414,3.254-1.242,4.84s-2.195,2.707-4.102,3.363c1.594,0.641,2.723,1.551,3.387,2.73s0.996,2.98,0.996,5.402v2.32c0,1.578,0.063,2.648,0.19,3.211c0.19,0.891,0.635,1.547,1.333,1.969V48.569z M75.579,48.569h-26.18V14.022h25.336v6.117H56.454v7.336h16.781v6H56.454v8.883h19.125V48.569z M104.497,46.331c-2.44,2.086-5.887,3.129-10.34,3.129c-4.548,0-8.125-1.027-10.731-3.082s-3.909-4.879-3.909-8.473h6.891c0.224,1.578,0.662,2.758,1.316,3.539c1.196,1.422,3.246,2.133,6.15,2.133c1.739,0,3.151-0.188,4.236-0.562c2.058-0.719,3.087-2.055,3.087-4.008c0-1.141-0.504-2.023-1.512-2.648c-1.008-0.609-2.607-1.148-4.796-1.617l-3.74-0.82c-3.676-0.812-6.201-1.695-7.576-2.648c-2.328-1.594-3.492-4.086-3.492-7.477c0-3.094,1.139-5.664,3.417-7.711s5.623-3.07,10.036-3.07c3.685,0,6.829,0.965,9.431,2.895c2.602,1.93,3.966,4.73,4.093,8.402h-6.938c-0.128-2.078-1.057-3.555-2.787-4.43c-1.154-0.578-2.587-0.867-4.301-0.867c-1.907,0-3.428,0.375-4.565,1.125c-1.138,0.75-1.706,1.797-1.706,3.141c0,1.234,0.561,2.156,1.682,2.766c0.721,0.406,2.25,0.883,4.589,1.43l6.063,1.43c2.657,0.625,4.648,1.461,5.975,2.508c2.059,1.625,3.089,3.977,3.089,7.055C108.157,41.624,106.937,44.245,104.497,46.331z M139.61,48.569h-26.18V14.022h25.336v6.117h-18.281v7.336h16.781v6h-16.781v8.883h19.125V48.569z M170.337,20.14h-10.336v28.43h-7.266V20.14h-10.383v-6.117h27.984V20.14z\"\r\n    );\r\n    resetPanZoomControlShape2.setAttribute(\r\n      \"class\",\r\n      \"svg-pan-zoom-control-element\"\r\n    );\r\n    resetPanZoomControl.appendChild(resetPanZoomControlShape2);\r\n\r\n    return resetPanZoomControl;\r\n  },\r\n\r\n  _createZoomOut: function(instance) {\r\n    // zoom out\r\n    var zoomOut = document.createElementNS(SvgUtils.svgNS, \"g\");\r\n    zoomOut.setAttribute(\"id\", \"svg-pan-zoom-zoom-out\");\r\n    zoomOut.setAttribute(\"transform\", \"translate(30.5 70) scale(0.015)\");\r\n    zoomOut.setAttribute(\"class\", \"svg-pan-zoom-control\");\r\n    zoomOut.addEventListener(\r\n      \"click\",\r\n      function() {\r\n        instance.getPublicInstance().zoomOut();\r\n      },\r\n      false\r\n    );\r\n    zoomOut.addEventListener(\r\n      \"touchstart\",\r\n      function() {\r\n        instance.getPublicInstance().zoomOut();\r\n      },\r\n      false\r\n    );\r\n\r\n    var zoomOutBackground = document.createElementNS(SvgUtils.svgNS, \"rect\"); // TODO change these background space fillers to rounded rectangles so they look prettier\r\n    zoomOutBackground.setAttribute(\"x\", \"0\");\r\n    zoomOutBackground.setAttribute(\"y\", \"0\");\r\n    zoomOutBackground.setAttribute(\"width\", \"1500\"); // larger than expected because the whole group is transformed to scale down\r\n    zoomOutBackground.setAttribute(\"height\", \"1400\");\r\n    zoomOutBackground.setAttribute(\"class\", \"svg-pan-zoom-control-background\");\r\n    zoomOut.appendChild(zoomOutBackground);\r\n\r\n    var zoomOutShape = document.createElementNS(SvgUtils.svgNS, \"path\");\r\n    zoomOutShape.setAttribute(\r\n      \"d\",\r\n      \"M1280 576v128q0 26 -19 45t-45 19h-896q-26 0 -45 -19t-19 -45v-128q0 -26 19 -45t45 -19h896q26 0 45 19t19 45zM1536 1120v-960q0 -119 -84.5 -203.5t-203.5 -84.5h-960q-119 0 -203.5 84.5t-84.5 203.5v960q0 119 84.5 203.5t203.5 84.5h960q119 0 203.5 -84.5 t84.5 -203.5z\"\r\n    );\r\n    zoomOutShape.setAttribute(\"class\", \"svg-pan-zoom-control-element\");\r\n    zoomOut.appendChild(zoomOutShape);\r\n\r\n    return zoomOut;\r\n  },\r\n\r\n  disable: function(instance) {\r\n    if (instance.controlIcons) {\r\n      instance.controlIcons.parentNode.removeChild(instance.controlIcons);\r\n      instance.controlIcons = null;\r\n    }\r\n  }\r\n};\r\n","var SvgPanZoom = require(\"./svg-pan-zoom.js\");\r\n\r\nmodule.exports = SvgPanZoom;\r\n"],"sourceRoot":""}